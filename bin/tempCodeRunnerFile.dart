import 'dart:io';
import 'dart:convert';
import 'package:intl/intl.dart';
import 'package:orm/orm.dart';
import 'package:task_manager/prisma_client.dart/client.dart';
import 'package:task_manager/prisma_client.dart/prisma.dart';

class TaskApp {
  late final PrismaClient prisma;

  TaskApp() {
    prisma = PrismaClient(
      datasources: {
        'db': 'file:./prisma/prisma/tasks.db',
      }, 
    );
  }

  Future<void> addTask() async {
    stdout.write('Ti√™u ƒë·ªÅ: ');
    final title = stdin.readLineSync() ?? '';
    if (title.trim().isEmpty) {
      print('‚ùå Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c r·ªóng');
      return;
    }
    stdout.write('M√¥ t·∫£: ');
    final description = stdin.readLineSync() ?? '';
    if (description.trim().isEmpty) {
      print('‚ùå M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c r·ªóng');
      return;
    }
    print('M·ª©c ƒë·ªô ∆∞u ti√™n (1-High, 2-Medium, 3-Low): ');
    final p = stdin.readLineSync();
    String priority;
    switch (p) {
      case '1':
        priority = 'High';
        break;
      case '2':
        priority = 'Medium';
        break;
      case '3':
        priority = 'Low';
        break;
      default:
        print('‚ùå ∆Øu ti√™n kh√¥ng h·ª£p l·ªá');
        return;
    }
    stdout.write('H·∫°n (dd/MM/yyyy, Enter ƒë·ªÉ b·ªè qua): ');
    final dueStr = stdin.readLineSync();
    DateTime? dueDate;
    if (dueStr != null && dueStr.trim().isNotEmpty) {
      try {
        dueDate = DateFormat('dd/MM/yyyy').parseStrict(dueStr.trim());
      } catch (_) {
        print('‚ùå ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá!');
        return;
      }
    }
    stdout.write('External link (Enter ƒë·ªÉ b·ªè qua): ');
    final link = stdin.readLineSync();
    String? externalLink;
    if (link != null && link.trim().isNotEmpty) {
      final uri = Uri.tryParse(link.trim());
      if (uri == null || (!uri.isAbsolute)) {
        print('‚ùå URL kh√¥ng h·ª£p l·ªá!');
        return;
      }
      externalLink = link.trim();
    }
    try {
      await prisma.task.create(
        data: PrismaUnion.$1(
          TaskCreateInput(
            title: title.trim(),
            description: description.trim(),
            priority: priority,
            dueDate: dueDate != null
                ? PrismaUnion.$1(dueDate)
                : PrismaUnion.$2(PrismaNull()),
            externalLink: externalLink != null
                ? PrismaUnion.$1(externalLink)
                : PrismaUnion.$2(PrismaNull()),
            isCompleted: false,
          ),
        ),
      );
      print('‚úÖ ƒê√£ th√™m task!');
    } catch (e) {
      print('‚ùå L·ªói khi th√™m task: $e');
    }
  }

  Future<void> showTasks() async {
    try {
      final tasks = (await prisma.task.findMany()).toList();
      if (tasks.isEmpty) {
        print('üì≠ Kh√¥ng c√≥ task n√†o!');
        return;
      }
      tasks.sort((a, b) => (a.priority ?? '').compareTo(b.priority ?? ''));
      for (var t in tasks) {
        print(
          '[[32m${t.isCompleted == true ? "‚úî" : " "}[0m] ID: ${t.id} | ${t.title} | ${t.priority} | H·∫°n: ${t.dueDate != null ? DateFormat('dd/MM/yyyy').format(t.dueDate!) : 'N/A'}',
        );
      }
    } catch (e) {
      print('‚ùå L·ªói khi hi·ªÉn th·ªã task: $e');
    }
  }

  Future<void> markCompleted() async {
    stdout.write('Nh·∫≠p ID task c·∫ßn ƒë√°nh d·∫•u ho√†n th√†nh: ');
    final id = int.tryParse(stdin.readLineSync() ?? '');
    if (id == null) {
      print('‚ùå ID kh√¥ng h·ª£p l·ªá');
      return;
    }
    try {
      final updated = await prisma.task.update(
        where: TaskWhereUniqueInput(id: id),
        data: PrismaUnion.$1(
          TaskUpdateInput(isCompleted: PrismaUnion.$1(true)),
        ),
      );
      print(
        updated != null
            ? '‚úÖ ƒê√£ ƒë√°nh d·∫•u ho√†n th√†nh!'
            : '‚ùå Kh√¥ng t√¨m th·∫•y task!',
      );
    } catch (e) {
      print('‚ùå L·ªói khi ƒë√°nh d·∫•u ho√†n th√†nh: $e');
    }
  }

  Future<void> deleteTask() async {
    stdout.write('Nh·∫≠p ID task c·∫ßn x√≥a: ');
    final id = int.tryParse(stdin.readLineSync() ?? '');
    if (id == null) {
      print('‚ùå ID kh√¥ng h·ª£p l·ªá');
      return;
    }
    try {
      final deleted = await prisma.task.delete(
        where: TaskWhereUniqueInput(id: id),
      );
      print(deleted != null ? '‚úÖ ƒê√£ x√≥a task!' : '‚ùå Kh√¥ng t√¨m th·∫•y task!');
    } catch (e) {
      print('‚ùå L·ªói khi x√≥a task: $e');
    }
  }

  Future<void> viewDetail() async {
    stdout.write('Nh·∫≠p ID task c·∫ßn xem chi ti·∫øt: ');
    final id = int.tryParse(stdin.readLineSync() ?? '');
    if (id == null) {
      print('‚ùå ID kh√¥ng h·ª£p l·ªá');
      return;
    }
    try {
      final task = await prisma.task.findUnique(
        where: TaskWhereUniqueInput(id: id),
      );
      if (task == null) {
        print('‚ùå Kh√¥ng t√¨m th·∫•y task!');
        return;
      }
      print('--- Chi ti·∫øt Task ---');
      print('ID: ${task.id}');
      print('Ti√™u ƒë·ªÅ: ${task.title}');
      print('M√¥ t·∫£: ${task.description}');
      print('∆Øu ti√™n: ${task.priority}');
      print(
        'H·∫°n: ${task.dueDate != null ? DateFormat('dd/MM/yyyy').format(task.dueDate!) : 'N/A'}',
      );
      print('Link: ${task.externalLink ?? 'N/A'}');
      print(
        'Tr·∫°ng th√°i: [34m${task.isCompleted == true ? 'ƒê√£ ho√†n th√†nh' : 'Ch∆∞a ho√†n th√†nh'}[0m',
      );
      if (task.externalLink != null) {
        stdout.write('B·∫°n c√≥ mu·ªën m·ªü li√™n k·∫øt n√†y kh√¥ng? (y/n): ');
        final open = stdin.readLineSync();
        if (open?.toLowerCase() == 'y') {
          if (Platform.isWindows) {
            Process.run('start', [task.externalLink!], runInShell: true);
          } else if (Platform.isMacOS) {
            Process.run('open', [task.externalLink!]);
          } else {
            Process.run('xdg-open', [task.externalLink!]);
          }
          print('ƒê√£ m·ªü li√™n k·∫øt tr√™n tr√¨nh duy·ªát!');
        }
      }
    } catch (e) {
      print('‚ùå L·ªói khi xem chi ti·∫øt: $e');
    }
  }

  Future<void> searchTask() async {
    stdout.write('Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm: ');
    final keyword = stdin.readLineSync()?.toLowerCase() ?? '';
    try {
      final tasks = await prisma.task.findMany();
      final found = tasks
          .where(
            (t) =>
                (t.title?.toLowerCase() ?? '').contains(keyword) ||
                (t.description?.toLowerCase() ?? '').contains(keyword),
          )
          .toList();
      if (found.isEmpty) {
        print('üì≠ Kh√¥ng t√¨m th·∫•y task n√†o!');
        return;
      }
      print('--- K·∫øt qu·∫£ t√¨m ki·∫øm ---');
      for (var t in found) {
        print(
          '[${t.isCompleted == true ? "‚úî" : " "}] ID: ${t.id} | ${t.title} | ${t.priority}',
        );
      }
    } catch (e) {
      print('‚ùå L·ªói khi t√¨m ki·∫øm: $e');
    }
  }

  Future<void> run() async {
    try {
      await prisma.$connect(); // Explicitly connect to the database
      while (true) {
        print('''
===== ·ª®ng d·ª•ng Qu·∫£n l√Ω Task =====

1. Th√™m Task
2. Hi·ªÉn th·ªã Task
3. ƒê√°nh d·∫•u Task l√† Ho√†n th√†nh
4. X√≥a Task
5. Xem chi ti·∫øt Task
6. T√¨m ki·∫øm Task
7. Tho√°t
''');
        stdout.write('Ch·ªçn m·ªôt t√πy ch·ªçn: ');
        final c = stdin.readLineSync();
        switch (c) {
          case '1':
            await addTask();
            break;
          case '2':
            await showTasks();
            break;
          case '3':
            await markCompleted();
            break;
          case '4':
            await deleteTask();
            break;
          case '5':
            await viewDetail();
            break;
          case '6':
            await searchTask();
            break;
          case '7':
            await prisma.$disconnect();
            print('T·∫°m bi·ªát!');
            return;
          default:
            print('‚ùå T√πy ch·ªçn kh√¥ng h·ª£p l·ªá!');
        }
        print('\n-----------------------------------\n');
      }
    } catch (e) {
      print('‚ùå L·ªói khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: $e');
    } finally {
      await prisma.$disconnect(); // Ensure disconnection on error
    }
  }
}

void main() async {
  stdout.encoding = utf8;
  await TaskApp().run();
}
